/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.kvac.phoenix.endpoint.client.gui;

import com.github.kvac.phoenix.endpoint.client.db.DataBaseHeader;
import com.github.kvac.phoenix.libs.objects.MySettings;
import com.github.kvac.phoenix.libs.objects.cs.S;
import java.awt.TextComponent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jdcs_dev
 */
@Getter
public class First_Settings extends javax.swing.JFrame {

    protected static final Logger logger = LoggerFactory.getLogger(First_Settings.class);

    ArrayList<S> serversList = new ArrayList<>();

    static final List<String> invalidStrings = new ArrayList<String>() {
        private static final long serialVersionUID = 1l;

        {
            this.add(" ");
            this.add("\t");

        }
    };

    /**
     * Creates new form First_Settings
     */
    public First_Settings() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField_name = new java.awt.TextField();
        label1 = new java.awt.Label();
        checkbox1 = new java.awt.Checkbox();
        checkbox_NameValid = new java.awt.Checkbox();
        textArea1 = new java.awt.TextArea();
        jRadioButton_validServers = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1_serversCount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Первоначальная настройка");

        textField_name.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textField_name.setText("DefaultUser");
        textField_name.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                nameChanged(evt);
            }
        });

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setText("Имя");

        checkbox1.setLabel("Делиться ip адресом");

        checkbox_NameValid.setEnabled(false);
        checkbox_NameValid.setLabel("Имя корректное");
        checkbox_NameValid.setState(true);

        textArea1.setText("skanfa.asuscomm.com:2000,localhost:2000,skanfa.asuscomm.com:5000,localhost:5000      ");
        textArea1.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                serverChanged(evt);
            }
        });

        jRadioButton_validServers.setSelected(true);
        jRadioButton_validServers.setText("Список корректен");
        jRadioButton_validServers.setEnabled(false);

        jLabel1.setBackground(new java.awt.Color(51, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Список серверов через запятую");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setBackground(new java.awt.Color(51, 0, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Список серверов через запятую");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextField1_serversCount.setEditable(false);
        jTextField1_serversCount.setText("0");
        jTextField1_serversCount.setToolTipText("");

        jButton1.setText("Сохранить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHandler(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton_validServers)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1_serversCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(checkbox_NameValid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(jButton1)))
                .addContainerGap(188, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(175, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkbox_NameValid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_validServers)
                    .addComponent(jTextField1_serversCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(22, 22, 22))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(153, 153, 153)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(229, Short.MAX_VALUE)))
        );

        label1.getAccessibleContext().setAccessibleName("label_name");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_nameChanged
        TextComponent tc = (TextComponent) evt.getSource();
        String text = tc.getText();
        System.out.println(text);
        if (validName(text)) {
            checkbox_NameValid.setState(true);
        } else {
            checkbox_NameValid.setState(false);
        }
    }//GEN-LAST:event_nameChanged

    private void serverChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_serverChanged
        serversList.clear();

        boolean serversvalid = true;
        jTextField1_serversCount.setText("");

        TextComponent tc = (TextComponent) evt.getSource();
        String text = tc.getText();
        String[] serversStringSplited = text.split(",");

        for (String string : serversStringSplited) {
            System.err.println(string);

            if (S.validServer(string)) {
                S server = S.parseString(string);
                if (server.getId() == null) {
                    server.setId(server.getHost() + server.getPort());
                }
                serversList.add(server);
            } else {
                serversvalid = false;
            }
        }
        jRadioButton_validServers.setSelected(serversvalid);
        jTextField1_serversCount.setText(String.valueOf(serversList.size()));
    }//GEN-LAST:event_serverChanged

    private void saveHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHandler
        try {
            long nameTime = System.currentTimeMillis() / 1000;
            String newName = textField_name.getText();
            int count_settings = (int) DataBaseHeader.getDataBase().getSettingsDao().countOf();
            if (count_settings == 1 || count_settings == 0) {
                if (count_settings == 0) {
                    MySettings settings = new MySettings();
                    settings.setNameTime(nameTime);
                    settings.setName(newName);
                    settings.setMyID(UUID.randomUUID().toString());

                    DataBaseHeader.getDataBase().getSettingsDao().createOrUpdate(settings);
                } else if (count_settings == 1) {
                    MySettings settingsFromDB = DataBaseHeader.getDataBase().getSettingsDao().queryForAll().get(0);

                    settingsFromDB.setNameTime(nameTime);
                    settingsFromDB.setName(newName);

                    DataBaseHeader.getDataBase().getSettingsDao().update(settingsFromDB);
                }
            } else {

            }
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(First_Settings.class.getName()).log(Level.SEVERE, null, ex);
        }

        serversList.forEach((s) -> {
            String msg = s.getId() + ":" + s.getName() + ":" + s.getHost() + ":" + s.getPort();
            logger.info(msg);
            try {
                DataBaseHeader.getDataBase().saveServer(s);
            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(First_Settings.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

    }//GEN-LAST:event_saveHandler

    public static boolean validName(String name) {
        return invalidStrings.stream().noneMatch((invalidString) -> (name.toLowerCase().contains(invalidString.toLowerCase())));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox checkbox_NameValid;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton_validServers;
    private javax.swing.JTextField jTextField1_serversCount;
    private java.awt.Label label1;
    private java.awt.TextArea textArea1;
    private java.awt.TextField textField_name;
    // End of variables declaration//GEN-END:variables
}
