    private void pastMethodRun() {
        if (pastMethod) {
            boolean random = false;
            do {
                HostPortPair randomObject = null;

                if (random) {
                    int minrand = 0;
                    int maxrand = hostPortPairs.size();
                    if (maxrand < 1) {
                        continue;
                    }
                    int randId = getRandomNumberInRange(minrand, maxrand - 1);
                    System.err.println("minrand:" + minrand + "\nmaxrand:" + maxrand + "\nrandId:" + randId + "\nhostPortPairs:" + hostPortPairs.size());
                    randomObject = hostPortPairs.get(randId);

                } else {
                    for (HostPortPair hostPortPair : hostPortPairs) {
                        if (randomObject == null) {
                            randomObject = hostPortPair;
                            hostPortPairs.remove(hostPortPair);
                        }
                    }
                }
                if (randomObject != null) {
                    String host = randomObject.getHost();
                    int port = randomObject.getPort();
                    HostPortConnected hpc = new HostPortConnected();
                    hpc.setHost(host);
                    hpc.setPort(port);

                    if (!HostPortConnected.avInList(NetWorkHeader.getHostPortConnectedList(), hpc)) {
                        new Thread(() -> {
                            try {
                                Client client = new Client();
                                client.setHpc(hpc);
                                NetWorkHeader.getHostPortConnectedList().add(client.getHpc());

                                try {
                                    client.connect();
                                    getLoggerJ().info("connected to " + client.getHpc().getHost() + ":" + client.getHpc().getPort());
                                    new Thread(client).start();
                                } catch (IOException e) {
                                    NetWorkHeader.getHostPortConnectedList().remove(client.getHpc());
                                }//Thread.sleep(1000);
                            } catch (Exception ex) {
                                getLoggerJ().error("InterruptedException | IOException", ex);
                            }
                        }).start();
                    }
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    getLoggerJ().error("InterruptedException:100", ex);
                }

            } while (true);
        }
    }

package com.github.kvac.phoenix.endpoint.client.network.connection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.github.kvac.phoenix.libs.objects.Message;
import com.github.kvac.phoenix.libs.objects.Ping;
import com.github.kvac.phoenix.libs.objects.cs.CS;
import com.github.kvac.phoenix.libs.objects.events.ra.request.MessageRequest;
import com.github.kvac.phoenix.libs.objects.events.ra.request.RSearchCS;
import com.github.kvac.phoenix.libs.objects.events.ra.request.Request;
import phoenixendpointclient.phoenix.endpoint.client.events.ClientEventHEADER;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jdcs_dev
 */
public class Client_Reader implements Runnable {

    protected static final Logger logger = LoggerFactory.getLogger(Client_Reader.class);
    @Getter
    @Setter
    private Client parent;

    Client_Reader(Client clientThis) {
        setParent(clientThis);
    }
    @Getter
    @Setter
    private ObjectInputStream ois;

    private void openReadStream() throws IOException {
        setOis(new ObjectInputStream(getParent().getSocket().getInputStream()));
    }

    @Override
    public void run() {
        Thread.currentThread().setName("(Client_Reader): " + getParent().getHpc().getHost() + ":" + getParent().getHpc().getPort());
        try {
            openReadStream();
            Object object;
            while (getParent().isMarker() == false) {
                try {
                    object = getOis().readObject();
                    if (object instanceof Ping) {
                        //  logger.info("PING");
                    } else if (object instanceof Request) {
                        Request request = (Request) object;
                        if (request instanceof RSearchCS) {
                            RSearchCS rscs = (RSearchCS) request;
                            if (rscs.isItAnswere()) {
                                Object data = rscs.getAnswereData();
                                if (data instanceof ArrayList) {
                                    ArrayList dataList = (ArrayList) data;
                                    if (dataList.size() > 0) {
                                        Class<? extends Object> dataObjType = dataList.get(0).getClass();
                                        if (dataObjType.equals(CS.class)) {
                                            ArrayList<CS> dataListC = dataList;
                                            ClientEventHEADER.getFORSEARCHANSWER_EVENT_BUS().post(dataListC);
                                        }
                                    }
                                }
                            }
                        } else if (request instanceof MessageRequest) {
                            MessageRequest messageRequest = (MessageRequest) request;
                            Object answ = messageRequest.getAnswereData();
                            if (answ instanceof List) {
                                List list = (List) answ;
                                if (list.size() > 0) {
                                    if (list.get(0) instanceof Message) {
                                        List<Message> messages = list;
                                        messages.forEach(message -> {
                                            message.save();
                                        });
                                    }
                                }

                            }
                        }
                    }
                } catch (ClassNotFoundException e) {
                    logger.warn("class not found", e);
                } catch (SocketTimeoutException e) {
                    getParent().setMarker(true);
                    logger.warn("timeout");
                } catch (IOException e) {
                    getParent().setMarker(true);
                }
            }

        } catch (SocketTimeoutException e) {
            getParent().setMarker(true);
            logger.warn("openReadStream:timeout");
        } catch (EOFException e) {
            getParent().setMarker(true);
            logger.warn("openReadStream:connection break when opening ObjectInputStream");
        } catch (StreamCorruptedException e) {
            logger.warn("incorrect data received");
            getParent().setMarker(true);
        } catch (IOException e) {
            logger.warn("", e);
            getParent().setMarker(true);
        }
        logger.info(Thread.currentThread().getName() + " is stoped");
    }

}

package com.github.kvac.phoenix.endpoint.client.network.connection;

import com.github.kvac.phoenix.endpoint.client.network.NetWorkHeader;
import com.github.kvac.phoenix.event.EventHEADER.EventHEADER;
import com.github.kvac.phoenix.event.PhoenixEvent;
import com.github.kvac.phoenix.event.msg.MessageEvent;
import com.github.kvac.phoenix.libs.objects.Auth;
import com.github.kvac.phoenix.libs.objects.HostPortConnected;
import com.github.kvac.phoenix.libs.objects.Message;
import com.github.kvac.phoenix.libs.objects.Ping;
import com.github.kvac.phoenix.libs.objects.cs.CS;
import com.github.kvac.phoenix.libs.objects.events.MyEvent;
import com.github.kvac.phoenix.libs.objects.events.MyEvent.TYPE;
import com.github.kvac.phoenix.libs.objects.events.ra.request.MessageRequest;
import com.github.kvac.phoenix.libs.objects.events.ra.request.RSearchCS;
import com.github.kvac.phoenix.libs.objects.events.ra.request.Request;
import com.google.common.eventbus.Subscribe;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import phoenixendpointclient.phoenix.endpoint.client.events.ClientEventHEADER;

public class Client implements Runnable {

    @Getter
    @Setter
    private Client clientThis = this;

    protected static final Logger logger = LoggerFactory.getLogger(Client.class);
    //marker
    @Getter
    @Setter
    private boolean marker = false;
    //marker

    //DATA
    @Getter
    @Setter
    private Socket socket;
    @Getter
    @Setter
    private HostPortConnected hpc;
    //DATA

    //STREAMS
    @Getter
    @Setter
    private ObjectOutputStream oos;

    public void openWriterStream() throws IOException {
        setOos(new ObjectOutputStream(getSocket().getOutputStream()));
        logger.info(Thread.currentThread().getName() + " openWriterStream() is opened");
    }

    //STREAMS
    @Override
    public void run() {
        Thread.currentThread().setName("(Writer): " + getHpc().getHost() + ":" + getHpc().getPort());
        try {
            openWriterStream();
            //IDENT
            authMe();
            //IDENT
            register();
            new Thread(new Client_Reader(clientThis)).start();
            while (marker == false) {
                Thread.sleep(300);
            }
        } catch (SocketTimeoutException e) {
            setMarker(true);
        } catch (Exception e) {
            logger.warn("", e);
        }

        NetWorkHeader.getHostPortConnectedList().remove(getHpc());
        logger.info(Thread.currentThread().getName() + " Hpc removed");
        unregister();
        try {
            logger.info(Thread.currentThread().getName() + " closing");
            socket.close();
            logger.info(Thread.currentThread().getName() + " closed");
        } catch (IOException e) {
            logger.info(Thread.currentThread().getName() + " close", e);
        }
        logger.info(Thread.currentThread().getName() + " is stoped");

    }

    public void connect() throws SocketException, IOException {
        Socket so = new Socket();
        so.connect(new InetSocketAddress(getHpc().getHost(), getHpc().getPort()));
        so.setSoTimeout(10000);
        setSocket(so);
    }

    private void register() {
        EventHEADER.getBus_Ping().register(clientThis);
        EventHEADER.getBus_cs_clear().register(clientThis);
        EventHEADER.getSERVERS_REQUEST_BUS().register(clientThis);
        ClientEventHEADER.getFORMESSAG_EVENT_BUS().register(clientThis);

        ClientEventHEADER.getFORMESSAG_EVENT_BUS().register(clientThis);
        ClientEventHEADER.getREQUEST_REMOTE_EVENT_BUS().register(clientThis);
    }

    private void unregister() {
        EventHEADER.getBus_Ping().unregister(clientThis);
        EventHEADER.getBus_cs_clear().unregister(clientThis);
        EventHEADER.getSERVERS_REQUEST_BUS().unregister(clientThis);

        ClientEventHEADER.getFORMESSAG_EVENT_BUS().unregister(clientThis);
        ClientEventHEADER.getREQUEST_REMOTE_EVENT_BUS().unregister(clientThis);
    }

    public void send(Object object) {
        try {
            getOos().writeObject(object);
            getOos().flush();
        } catch (Exception e) {
            setMarker(true);
        }
    }

    @Subscribe
    public void ping(Ping ping) {
        send(ping);
    }

    @Subscribe
    public void sendOwnCS(MyEvent event) {
        if (event.getType().equals(TYPE.CS_C)
                && event.getObject() instanceof CS) {
            send((CS) event.getObject());
        }
    }

    @Subscribe
    public void sendMessages(MessageEvent messageEvent) {
        PhoenixEvent.TYPE typem = messageEvent.getType();
        if (typem.equals(PhoenixEvent.TYPE.MESSAGE_CLEAR)) {
            if (messageEvent.getObject() instanceof Message) {
                Message message = (Message) messageEvent.getObject();
                send(message);
            }
        }
    }

    @Subscribe
    public void sendRequest(Request request) {
        if (request instanceof MessageRequest) {
            send((MessageRequest) request);
        } else {
            System.out.println(request.getClass());
        }
    }

    @Subscribe
    public void sendRequestSearchCS(MyEvent event) {
        if (event.getType().equals(TYPE.CS_SearchR)
                && event.getObject() instanceof RSearchCS) {
            send((RSearchCS) event.getObject());
        }
    }

    private void authMe() {
        Auth auth = new Auth();
        auth.setWho(NetWorkHeader.getMycs());
        send(auth);
    }
}

    // public int getAVSERVERPORT() {
    //     int PortMin;
    //    int port = PortMin = 2000;
    //     int PortMax = 2003;
    //     while (simplePortScan("127.0.0.1", port) && port <= PortMax) {
    //         port = port + 1;
    //      }
    //      return port;
    //   }
    //  public boolean simplePortScan(String Host, int port) {
    //   Socket socket = new Socket();
    //   try {
    //       socket.connect(new InetSocketAddress(Host, port));
    //   } catch (IOException e) {
    //       try {
    //            socket.close();
    //       } catch (IOException e1) {
    //            getLoggerJ().error("", e);
    //         }
    //        return false;
    //    }
    //    try {
    //        socket.close();
    //     } catch (IOException e) {
    //         getLoggerJ().error("", e);
    //     }
    //     return true;
    //  }
    // private void past() {
    //    if (past) {
    //        Thread.currentThread().setName("SERVER");
    //  try {
    //           try (ServerSocket serverSocket = new ServerSocket(5000)) {
    //               System.out.println("Server started on " + serverSocket.getLocalPort());
    //              while (stop == false) {
    //                  try {
    //                     Socket client = serverSocket.accept();
    //                     client.setSoTimeout(HEADER_NETWORK.getTimeout());
    //                      ServerWorker clientWorker = new ServerWorker(this, client);
    //                      new Thread(clientWorker).start();
    //                   } catch (IOException e) {
    //                       getLoggerJ().error("", e);
    //                   }
    //               }
    //            }
    //        } catch (IOException e) {
    //           getLoggerJ().error("", e);
    //        }
    //        System.err.println(Thread.currentThread() + " is closed");
    //     }
    // }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    private void receive() throws IOException, ClassNotFoundException {
        Object object;
        while (marker == false) {
            if (getOis() == null) {
                break;
            }
            object = getOis().readObject();
            if (object instanceof Ping) {
            } else if (object instanceof Auth) {
                logger.info("AUTH  started");
                Auth auth = (Auth) object;
                setClientCS(auth.getWho());
                try {
                    if (NetWorkHeader.getChmConnectedCS().containsKey(auth.getWho().getID())) {
                        logger.error("УЖЕ ПОДКЛЮЧЕН");
                        setMarker(true);
                    } else {
                        NetWorkHeader.getChmConnectedCS().put(auth.getWho().getID(), auth.getWho());
                    }
                    logger.info("AUTH  completed*");
                } catch (Exception e) {
                    logger.error("AUTH", e);
                }
            } else if (object instanceof CS) {
                CS cs = (CS) object;
                cs.save();
            } else if (object instanceof Request) {
                Request request = (Request) object;
                if (request instanceof RSearchCS) {
                    RSearchCS rSearchCS = (RSearchCS) request;
                    NetWorkHandler.getAnswerForRequest(rSearchCS);
                } else if (request instanceof MessageRequest) {
                    try {
                        MessageRequest messageRequest = (MessageRequest) request;
                        CS who = messageRequest.getWho();
                        Dao<Message, String> messageDao = DataBaseHeader.getDataBase().getMessageDao();
                        QueryBuilder<Message, String> queryBuilder = messageDao.queryBuilder();
                        List<Message> answ = queryBuilder.where().eq("From_id", who.getID()).or().eq("To_id", who.getID()).query();
                        MessageRequest answer = new MessageRequest();
                        answer.setItAnswere(true);
                        answer.setAnswereData(answ);
                        getWriter().send(answer);
                    } catch (SQLException e) {
                        logger.error("MessageRequest:", e);
                    }
                }
            } else if (object instanceof Message) {
                Message message = (Message) object;
                message.save();
            } else {
                NetWorkHandler.handleOtherObject(object);
            }
        }
    }
    @Override
    public void run() {
        Thread.currentThread().setName("(ServerWorker_READER): " + getClient().getRemoteSocketAddress());
        try {
            createWriter();
       //     receive();
        } catch (java.lang.ClassCastException e) {
            logger.warn("java.lang.ClassCastException", e);
            setMarker(true);
            try {
                getClient().close();
            } catch (IOException ex) {
            }
        } catch (EOFException e) {
            logger.warn("incorrect data received", e);
            setMarker(true);
        } catch (StreamCorruptedException e) {
            logger.warn("incorrect data received");
            setMarker(true);
        } catch (SocketException | SocketTimeoutException e) {
            setMarker(true);
        } catch (IOException | ClassNotFoundException e) {
            logger.warn("", e);
        }
        endSession();
    }
